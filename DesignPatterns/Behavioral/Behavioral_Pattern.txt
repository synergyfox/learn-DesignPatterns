What is the Behavioral Design Pattern in C#?
----------------------------------------------------
Behavioral Design Patterns deal with the communication or interaction between Classes and Objects. This ensures that the communication is carried out effectively while
keeping the coupling loose. The primary goal of these patterns is to enhance the communication between objects, making it more flexible and efficient.

So, the behavioral design pattern explains how objects interact with each other. It describes how different objects and classes send messages
to each other to make things happen and how the steps of a task are divided among different objects.


When to use Behavioral Design Patterns in C#?
----------------------------------------------------
In real-time applications, sometimes we want to change the behavior of a class, and again, we don’t want it to affect other classes 
of the project. For example, we have an Invoice class that currently applies taxes as 18%. Tomorrow, if we want to add another extra tax. 
That means we are changing the behavior of a class. The Behavioral Design Pattern comes into the picture to solve such behavioral issues. 
Implementing Behavioral Design Patterns in C# helps to manage and optimize the interactions between objects and behaviors in an application:

Flexibility in Interaction: These patterns provide greater flexibility in deciding how objects interact with each other.
Ease of Maintenance: Encapsulating behavior in objects or classes that can be easily modified independently enhances maintainability.
Enhanced Control Flow: They can improve the control flow between objects and manage complex conditions more effectively.