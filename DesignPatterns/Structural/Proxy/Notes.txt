What is the Proxy Design Pattern?
According to the Gang of four definitions, the Proxy Design Pattern provides a surrogate (act on behalf of another) or placeholder for another object to control access to it. 

The Proxy Design Pattern allows us to create a class that represents the functionality of other classes. The proxy could interface with anything, such as a network connection, 
a large object in memory, a file, or other resources that are expensive or impossible to duplicate.

We can also say that the Proxy is the object the client calls to access the real object behind the scene. Proxy means in place of or on behalf of. That means, In the Proxy Design Pattern,
a class represents the functionality of another class. 

Let us understand the above definition with one example. Please look at the following diagram to understand the Proxy Design Pattern in C#. As you can see in the following image,
when the client wants to consume some methods of the Real Object, he/she needs to go via the Proxy object.
That means the client will call the method of the Proxy object, and the proxy will be responsible for calling the method of the Real Object.


Types of Proxies:
There are three types of proxies. They are as follows.

Virtual Proxy: A virtual proxy is a placeholder for “expensive to create” objects. The real object is only created when a client first requests or accesses the object.

Remote Proxy: A remote proxy provides local representation for an object that resides in a different address space.

Protection Proxy: A protection proxy controls access to a sensitive master object. The surrogate object checks that the caller has the access permissions required before forwarding the request.